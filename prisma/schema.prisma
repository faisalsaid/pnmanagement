datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  hashPassword  String?
  role          Role @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  pageVisits PageVisit[]

  // relasi articel
  articles     Article[]      @relation("AuthorArticles")
  comments     Comment[]
  uploadedMedia MediaAsset[] 
  revisions Revision[]  // relasi balik, opsional

  //relasi project
  createdProjects Project[]    @relation("CreatedProjects")
  ownedProjects    Project[]   @relation("OwnedProjects")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}




// ---------- CATEGORY ----------
model Category {
  id        String      @id @default(cuid())
  name      String      @unique
  slug      String      @unique
  articles  Article[]   @relation("CategoryArticles")
}



// ---------- TAG ----------
model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  slug      String      @unique
  articles  ArticleTag[]
}

model ArticleTag {
  articleId String
  tagId     String

  article   Article @relation(fields: [articleId], references: [id],  onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}

// ---------- MEDIA ASSET ----------
model MediaAsset {
  id            String    @id @default(cuid())
  title         String?
  caption       String?
  url           String
  public_id     String?
  secure_url    String?
  thumbnail_url String?
  resource_type String
  format        String?
  width         Int?
  height        Int?
  uploadedBy    String
  uploadedAt    DateTime  @default(now())

  uploader    User      @relation(fields: [uploadedBy], references: [id])
  usages      ArticleMedia[]
}

model ArticleMedia {
  articleId   String
  mediaAssetId String
  role         String 
  article      Article     @relation(fields: [articleId], references: [id])
  mediaAsset   MediaAsset  @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)

  @@id([articleId, mediaAssetId, role])
}

// ---------- ARTICLE / POSTINGAN BERITA ----------
model Article {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  summary       String?
  content       String          // HTML / Markdown
  status        ArticleStatus   @default(DRAFT)
  authorId      String
  categoryId    String
  publishedAt   DateTime?
  wordCount     Int?
  viewCount     Int             @default(0)

  author        User            @relation("AuthorArticles", fields: [authorId], references: [id])
  category      Category        @relation("CategoryArticles", fields: [categoryId], references: [id])
  tags          ArticleTag[]
  media         ArticleMedia[]
  comments      Comment[]
  revisions     Revision[]
  pageVisits    PageVisit[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
}

// ---------- KOMENTAR (OPTIONAL) ----------
model Comment {
  id         String    @id @default(cuid())
  articleId  String
  userId     String?
  content    String
  isPrivate  Boolean   @default(false)  // untuk catatan internal/editorial
  postedAt   DateTime  @default(now())

  article    Article   @relation(fields: [articleId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

// ---------- REVISION / AUDIT LOG ----------
model Revision {
  id           String    @id @default(cuid())
  articleId    String
  editorId     String
  summary      String     // ringkasan perubahan
  diff         String     // bisa JSON, patch, atau markdown
  createdAt    DateTime   @default(now())

  article      Article    @relation(fields: [articleId], references: [id])
  editor       User       @relation(fields: [editorId], references: [id])
}



model PageVisit {
  id          BigInt      @id @default(autoincrement())            // primary key
  visitTime   DateTime    @default(now())
  sessionId   String                                           // UUID sid di cookie
  userId      String?                                          // nullable kalau guest

  /* ── Geo & IP ────────────────────────────────────────────── */
  ip          String      @db.VarChar(45)                       // IPv4/IPv6 (gunakan @db.Inet jika memakai PG 14+ & Prisma >=5.15)
  city        String?     @db.VarChar(80)
  country     String?     @db.VarChar(80)
  timezone    String?     @db.VarChar(40)

  /* ── Halaman ─────────────────────────────────────────────── */
  url         String
  path        String
  pageType    PageType
  referrer    String?

  /* ── Relasi ke Article (opsional) ────────────────────────── */
  articleId   String?                                           // slug dari Article
  article     Article?    @relation(fields: [articleId], references: [id])

  /* ── Perangkat & Browser ─────────────────────────────────── */
  deviceType  String?     @db.VarChar(20)                       // "mobile" | "desktop" | ...
  os          String?     @db.VarChar(40)
  browser     String?     @db.VarChar(40)
  screen      String?     @db.VarChar(20)

  /* ── Preferensi ──────────────────────────────────────────── */
  language    String?     @db.VarChar(20)

  /* ── Ekstra fleksibel ────────────────────────────────────── */
  extra       Json?

  /* ── Relasi opsional ke User (kalau ada model User) ─────── */
  user        User?       @relation(fields: [userId], references: [id])

  /* ── Index untuk query analitik ──────────────────────────── */
  @@index([visitTime(sort: Desc)])
  @@index([articleId])
  @@index([country])
  @@index([sessionId])
}



// PROJECT 

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?


  // Relasi user
  createdBy   User     @relation("CreatedProjects", fields: [createdById], references: [id])
  createdById String

  owner       User     @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}




enum PageType {
  article
  page
  category
  other
}

enum Role {
  ADMIN
  PEMRED
  REDAKTUR
  REPORTER
  USER
  TESTER
}


enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}